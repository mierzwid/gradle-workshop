/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */

// Based on https://kotlinlang.org/docs/reference/

println("Hello World!")

System.out.println("Using Java Libs")

// mutability: https://kotlinlang.org/docs/reference/basic-syntax.html#defining-variables

val immutable = "immutable value" // immutable = "new value" - won't compile
var mutable = "mutable"
mutable = "new value"
println("Printing values: $immutable, $mutable")

// nullable types: https://kotlinlang.org/docs/reference/basic-syntax.html#using-nullable-values-and-checking-for-null

val nullableString: String? = null
val string: String = nullableString ?: "default value"
println("Printing nullable type: ${nullableString ?: "default value"}")

// Functions and return statement: https://kotlinlang.org/docs/reference/functions.html#functions
fun sayHelloWorld() {
    println("Function Hello World")
}

sayHelloWorld()

fun createMessage() { // in functions we need to return result explicitly
    "Last expression is returned from a function"
}
println(createMessage()) // kotlin.Unit

val createMessageLambda = {
    // last expression in lambda is returned
    "Last expression is returned from a function"
}

println(createMessageLambda()) // Last expression is returned from a lambda

// Classes and Objects: https://kotlinlang.org/docs/reference/classes.html#classes-and-inheritance
class AEM(val company: String = "Adobe", val version: String) {  // final by default
    fun fullName() = "AEM $version made by $company" // short notation -> return type inferred
}

val aem = AEM(version = "6.5") // new keyword omitted

println(aem.fullName()) // props are public by default

// Lambdas: https://kotlinlang.org/docs/reference/lambdas.html

val echoIt: (Any) -> Unit = {
    // need to specify type explicitly since it cannot be inferred otherwise
    println("Echoing it: $it")
}
echoIt(true)

// Extension functions: https://kotlinlang.org/docs/reference/extensions.html#extension-functions
fun AEM.prettyName() {
    println("Pretty: AEM $version made by $company")
}

aem.prettyName()

// Receiving objects

val pretty: AEM.() -> Unit = {
    println("Lambda with receiving object: AEM $version made by $company")
}

pretty(aem)
aem.pretty()
aem.apply(pretty)

// Let's mimic implementation of Gradle Application Plugin in Kotlin
// - Function literals with receiver: https://kotlinlang.org/docs/reference/lambdas.html#function-literals-with-receiver

class ApplicationPlugin(var mainClassName: String = "", var applicationDefaultJvmArgs: List<String> = listOf()) {
    fun run() {
        println("java -cp build/distributions/app.jar $mainClassName " + applicationDefaultJvmArgs.joinToString(" "))
    }
}

val plugin = ApplicationPlugin()

fun application(configurer: ApplicationPlugin.() -> Unit) {
    plugin.apply(configurer)
}

application {
    mainClassName = "com.cognified.Main"
    applicationDefaultJvmArgs = listOf("-Xms2G", "-Xmx2G")
}

plugin.run()

//Exercise: Write code enabling to create HTML - body and div tags
println("Exercise: Write code enabling to create HTML - body and div tags")

val document = html {
    body {
        div {
            attribute("id", "id-header")
            attribute("class", "header")
        }
        div {
            attribute("id", "id-content")
            attribute("class", "content")
        }
        div {
            attribute("id", "id-footer")
            attribute("class", "footer")
        }
    }
}

println(document)

fun html(block: HTML.() -> Unit) = HTML().apply(block).toString()

class HTML {

    private val body = Body()

    fun body(block: Body.() -> Unit) {
        body.apply(block)
    }

    override fun toString() = body.toString()
}

class Body {
    private var divs = listOf<Div>()

    fun div(block: Div.() -> Unit) {
        divs += Div().apply(block)
    }

    override fun toString() = """
            <html>
                <body>
                    ${divs.map { it.toString() }.joinToString("\n")}
                </body>
            </html>
        """
}

class Div {
    val attributes = mutableMapOf<String, String>()

    fun attribute(name: String, value: String) {
        attributes[name] = value
    }

    override fun toString() = "<div ${attributes.map { "${it.key}=\"${it.value}\"" }.joinToString(" ")}></div>"
}
