/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */

// Hello world in Groovy: http://docs.groovy-lang.org/next/html/documentation/

println "Hello World!"

// we can use any Java libraries from Groovy
System.out.println "Using Java Libs"

// Functions and return statement - function definition
def sayHelloWorld() {
    println "Function Hello World"
}

sayHelloWorld()

def createMessage() {
    "Last expression is returned from a function"
}

println createMessage()

// Objects
class AEM {

    String company

    String version

    def fullName() {
        "AEM $version made by $company"
    }

    AEM(company, version) {
        this.company = company
        this.version = version
    }
}

def aem = new AEM("Adobe", "6.5")

// object properties are public y default
println aem.fullName()
println aem.version

// Closures

def echoIt = {
    println "Echoing it: $it"
}
echoIt(true)

// Passing closures - like JS function, closure is an object

def oneArgMethod(action) {
    action() * 2
}

println "One arg method: ${oneArgMethod { 4 }}"

def twoArgMethod(factor, action) {
    action() * factor
}

println "One arg method: ${twoArgMethod(3) { 4 }}"

// Looping
// make sure to name param, since it name will be overridden in subsequent lambda
[1, 2, 3, 4, 5].each { param ->
    println oneArgMethod { param }
}

// Closure get reference to an object, not a value itself.
def variable = "A"

def echoVariable = {
    println "Variable value: $variable"
}

variable = "B"

echoVariable() // Variable value: B

// Let's mimic implementation of Gradle Application Plugin in Groovy - Closure context - lexical scope and delegates
class ApplicationPlugin {
    String mainClassName = ""
    List applicationDefaultJvmArgs = []

    def run() {
        println "java -cp build/distributions/app.jar $mainClassName " + applicationDefaultJvmArgs.join(" ")
    }

    def configure(action) {
        action.delegate = this
        action()
    }
}

def application(action) {
    def app = new ApplicationPlugin()
    app.configure(action)
    app.run()
}

application {
    mainClassName = "com.cognified.Main"
    applicationDefaultJvmArgs = ["-Xms2G", "-Xmx2G"]
}